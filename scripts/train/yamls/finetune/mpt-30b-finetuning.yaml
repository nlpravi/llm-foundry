integrations:
- integration_type: git_repo
  git_repo: nlpravi/llm-foundry
  # git_branch: # use your branch
  # git_commit: # OR use your commit hash
  pip_install: -e .[gpu]
  ssh_clone: false # Should be true if using a private repo

# We are fetching, converting, and training on the 'val' split
# as it is small and quick to get going for this demo.
# For real training runs, follow the instructions in `llm-foundry/scripts/train/README.md`
# to convert and host the full 'train' dataset.

command: |
  pip install s3fs
  cd llm-foundry/scripts/train
  composer train.py /mnt/config/parameters.yaml


image: mosaicml/pytorch:1.13.1_cu117-python3.10-ubuntu20.04
# Mosaic Cloud will use run_name (with a unique suffix) to populate the env var $COMPOSER_RUN_NAME
run_name: mpt-30b-finetuning-example

gpu_num: 32
gpu_type: a100_40gb
cluster: r8z2 # replace with your cluster here!

parameters:
  max_seq_len: 2048
  global_seed: 17

  # Run Name
  run_name: # If left blank, will be read from env var $COMPOSER_RUN_NAME

  # Model
  model:
    name: hf_causal_lm
    # pretrained_model_name_or_path: mosaicml/mpt-7b
    pretrained_model_name_or_path: mosaicml/mpt-30b-instruct
    device: cpu
    pretrained: true
    config_overrides:
      max_seq_len: ${max_seq_len}
      attn_config:
        attn_impl: triton

  # Tokenizer
  tokenizer:
    name: EleutherAI/gpt-neox-20b
    kwargs:
      model_max_length: ${max_seq_len}

  # Dataloaders
  train_loader:
    name: finetuning
    dataset:
      hf_name: json
      # path: s3://mosaicml-68c98fa5-0b21-4c7b-b40b-c4482db8832a/sut-extraction/ruichen/sut-combined-data/train.tsv 
      path: s3://mosaicml-68c98fa5-0b21-4c7b-b40b-c4482db8832a/attribute_extraction/attr_extraction_train.jsonl
      # preprocessing_fn: llmfoundry.data.finetuning.preprocessing_fn:preprocessing_sut_fn
      # preprocessing_fn: llmfoundry.data.finetuning.preprocessing_fn:preprocessing_attr_fn
      split: train
      # sep: ","
      max_seq_len: ${max_seq_len}
      allow_pad_trimming: false
      decoder_only_format: true
      shuffle: true
      # Use `python llmfoundry/data/packing.py --yaml-path /path/to/this/yaml/ ...` to profile
      # this run's optimal packing_ratio
      # packing_ratio:
    drop_last: true
    num_workers: 8
    pin_memory: false
    prefetch_factor: 2
    persistent_workers: true
    timeout: 0

  # eval_loader
  eval_loader:
    name: finetuning
    dataset:
      hf_name: json
      # path: s3://mosaicml-68c98fa5-0b21-4c7b-b40b-c4482db8832a/sut-extraction/ruichen/sut-combined-data/dev.tsv 
      path: s3://mosaicml-68c98fa5-0b21-4c7b-b40b-c4482db8832a/attribute_extraction/attr_extraction_test.jsonl
      # preprocessing_fn: llmfoundry.data.finetuning.preprocessing_fn:preprocessing_sut_fn
      # preprocessing_fn: llmfoundry.data.finetuning.preprocessing_fn:preprocessing_attr_fn
      split: validation
      # sep: ","
      max_seq_len: ${max_seq_len}
      allow_pad_trimming: false
      decoder_only_format: true
      shuffle: false
    drop_last: true
    num_workers: 8
    pin_memory: false
    prefetch_factor: 2
    persistent_workers: true
    timeout: 0

  # Optimization
  scheduler:
    name: linear_decay_with_warmup # linear no warmup is HF default which dolly used
    # t_warmup: 0ba
    t_warmup: 0.1dur
    alpha_f: 0

  optimizer:
    # mimic HF defaults to replicate dolly
    name: decoupled_adamw
    lr: 1.0e-6
    betas:
    - 0.9
    - 0.999
    eps: 1.0e-8
    weight_decay: 0

  algorithms:
    gradient_clipping:
      clipping_type: norm
      clipping_threshold: 1.0

  max_duration: 2ep
  eval_interval: 1ep # this is the only allowed value for no eval
  # eval_first: false
  # eval_subset_num_batches: -1
  # global_train_batch_size: 64 # assuming 8 gpus
  global_train_batch_size: 128 # assuming 16 gpus

  # System
  seed: ${global_seed}
  device_eval_batch_size: 8
  # device_train_microbatch_size: 4
  device_train_microbatch_size: auto
  precision: amp_bf16

  # FSDP
  fsdp_config:
    sharding_strategy: FULL_SHARD
    mixed_precision: PURE
    activation_checkpointing: true
    activation_checkpointing_reentrant: false
    activation_cpu_offload: false
    limit_all_gathers: true
    verbose: false

  # Logging
  progress_bar: false
  log_to_console: true
  console_log_interval: 100ba

  callbacks:
    speed_monitor:
      window_size: 10
    lr_monitor: {}
    memory_monitor: {}
    runtime_estimator: {}

  # loggers:
  #   wandb: {}

  # Checkpoint to local filesystem or remote object store
  # save_interval: 5000ba
  # save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
  # save_folder: ./{run_name}/checkpoints
  save_folder: s3://mosaicml-68c98fa5-0b21-4c7b-b40b-c4482db8832a/attribute_extraction/model

  # Load from remote object store
  # REPLACE THE BELOW with you own checkpoint!
  # load_path: oci://my-bucket/my-folder/mpt-7b/checkpoints/some_checkpoint.pt
